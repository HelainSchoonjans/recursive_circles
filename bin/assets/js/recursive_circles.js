// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var RecursiveCirclesFractal;

  RecursiveCirclesFractal = (function() {
    RecursiveCirclesFractal.prototype.numberOfRows = 400;

    RecursiveCirclesFractal.prototype.numberOfColumns = 600;

    RecursiveCirclesFractal.prototype.canvas = null;

    RecursiveCirclesFractal.prototype.drawingContext = null;

    RecursiveCirclesFractal.prototype.epsilon = 0.0001;

    RecursiveCirclesFractal.prototype.maxIterations = 25;

    RecursiveCirclesFractal.prototype.cellSize = 1;

    RecursiveCirclesFractal.prototype.resolution = 150;

    RecursiveCirclesFractal.prototype.center_r = 0;

    RecursiveCirclesFractal.prototype.center_i = 0;

    function RecursiveCirclesFractal() {
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      this.drawFractal();
    }

    RecursiveCirclesFractal.prototype.drawFractal = function() {
      console.log("Begin generation with", this.maxIterations, "iteration(s)");
      console.log("Centered at", this.center_r, this.center_i);
      this.draw(this.numberOfColumns / 2 + this.center_r, this.numberOfRows / 2 + this.center_i, this.resolution, 0);
      return console.log("Finished");
    };

    RecursiveCirclesFractal.prototype.createCanvas = function() {
      this.canvas = document.createElement('canvas');
      return document.body.appendChild(this.canvas);
    };

    RecursiveCirclesFractal.prototype.resizeCanvas = function() {
      this.canvas.height = this.cellSize * this.numberOfRows;
      return this.canvas.width = this.cellSize * this.numberOfColumns;
    };

    RecursiveCirclesFractal.prototype.createDrawingContext = function() {
      return this.drawingContext = this.canvas.getContext('2d');
    };

    RecursiveCirclesFractal.prototype.draw = function(x, y, radius, iteration) {
      this.drawingContext.strokeStyle = "hsl(" + radius + ", 60%, 50%)";
      this.drawingContext.beginPath();
      this.drawingContext.arc(x, y, radius, 0, 2 * Math.PI);
      this.drawingContext.stroke();
      if (iteration < this.maxIterations && radius > 1) {
        return this.draw(x, y, radius / 2, iteration + 1);
      }
    };

    return RecursiveCirclesFractal;

  })();

  window.RecursiveCirclesFractal = RecursiveCirclesFractal;

}).call(this);
